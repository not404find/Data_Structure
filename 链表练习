#include<stdio.h>
#include<malloc.h> 
#include<stdlib.h> 
typedef struct Node
{
	int data;//数据域
	struct Node * pNext;//指针域 
}NODE,*PNODE;//NODE等价于 struct Node,PNODE等价于 	struct Node *
//函数声明
PNODE create_list(); //创建链表 
void traverse_list(PNODE Phead);//输出 
bool is_empty(PNODE pHead);//判断是否满了
int length_list(PNODE);//求链表的长度 
bool insert_list(PNODE,int,int);//插入一个值 
bool delete_list(PNODE,int,int*);//删除 int表示删除这个地方的值，int*表示要删除的值是多少
void sort_list(PNODE);//排序 
int main()
{
	int val;
	PNODE pHead = NULL;//等价于 struct Node *pHead = NULL;（初始化） 
	pHead = create_list();// create_list()功能：创建一个非循环单链表，并将该链表的首地址赋给pHead
	
	traverse_list(pHead);
	insert_list(pHead,4,44);
	traverse_list(pHead);
	if(delete_list(pHead,2,&val)) 
	{
		printf("删除成功，是你删除的元素是%d\n",val);
	}
	else
	printf("删除失败,删除失败，删除的元素不存在！\n");
	traverse_list(pHead);
	int len = length_list(pHead);
	
	printf("链表的长度是:%d\n",len);
	if(is_empty(pHead))
	
		printf("链表为空\n");
	else
	    printf("链表不空\n"); 
	    sort_list(pHead);
		traverse_list(pHead);
return 0;

}
PNODE create_list(void)
{
	int len;//用来存放有效节点的个数 
	int i;
	int val;//用来临时存放用户输入节点的值 
	PNODE pHead = (PNODE)malloc(sizeof(NODE));//分配了一个不存放数据的头结点 
	if(NULL == pHead)
	{
		printf("分配失败，程序终止！！\n");
		exit(-1);
	}
	PNODE pTail = pHead;
	pTail->pNext = NULL; 
	printf("请输入你要生成链表节点的个数：len=");
	scanf("%d",&len);
	for(i=0;i<len;i++) 
	{
		printf("请输入第%d个节点的值：",i+1);
		scanf("%d",&val);
		PNODE pNew = (PNODE)malloc(sizeof(NODE));
		if(NULL == pHead)
	{
		printf("分配失败，程序终止！！\n");
		exit(-1);
	}
	pNew->data = val;
	pTail->pNext = pNew;
	pNew->pNext = NULL;
	pTail  = pNew; 
	}
	return pHead;
}
void traverse_list(PNODE pHead)
{
	PNODE p = pHead->pNext;
	while (NULL!=p)
	{
		printf("%d ",p->data);
		p = p->pNext;
	}
	printf("\n");
	return;
}
bool is_empty(PNODE pHead)
{
	if(NULL ==pHead->pNext)
	return true;
	else
	return false;
} 
int length_list(PNODE pHead)
{
	PNODE p = pHead->pNext;
	int len =0;
	while (NULL!=p)
	{
		p = p->pNext;
		len++;
	}
	return len;
}
void sort_list(PNODE pHead)
{
	int i,j,t;
	int len = length_list(pHead);
	PNODE p,q;
	for(i=0,p = pHead->pNext;i<len-1;i++,p=p->pNext)
	{
		for(j=i,q=p->pNext;j<len-1;j++,q=q->pNext)
		if(p->data>q->data)
		{
			t = p->data;//类似于数组中的t = a[i] 
		    p->data = q->data;//类似于数组中的a[i]=a[j]
		    q->data = t; //类似于数组中的a[j] = t
		}
		
		 
	 } 
	return;
}
bool insert_list(PNODE pHead,int pos,int val)//在pHead所指向链表的第pos的节点前插入一个值为val的新节点 ,POS从1开始 
{
	int i = 0;
	PNODE p = pHead;
	while(NULL!=p && i<pos-1)
	{
		p = p->pNext;
		i++;
    } 
    if(i>pos-1 || NULL == p)
    	return false;
    PNODE pNew = (PNODE)malloc(sizeof(NODE));
	if(NULL == pNew)
	{
		printf("动态内存分配失败！！\n");
		exit(-1);
	}	
	pNew->data = val;
	PNODE q= p->pNext;
	p->pNext = pNew;
	pNew->pNext = q;
	return true;
}
bool delete_list(PNODE pHead,int pos,int*pval)
{
	int i = 0;
	PNODE p = pHead;
	while(NULL!=p->pNext && i<pos-1)
	{
		p = p->pNext;
		i++;
    } 
    if(i>pos-1 || NULL == p->pNext)
    	return false;
    PNODE q = p->pNext;
	p->pNext = p->pNext->pNext;
	*pval = q->data;
 	free(q); 
 	q = NULL; 
	return true;
}
